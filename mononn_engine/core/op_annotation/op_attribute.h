// Copyright 2023 The MonoNN Authors. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>

namespace mononn_engine {
namespace core {
namespace op_annotation {
class OpAttribute {
 public:
  // initial cluster tag generated by XLA
  static const std::string initial_cluster_tag;
  // initial cluster type generated by XLA
  static const std::string initial_cluster_type;
  // cluster tag after merge independent pass
  static const std::string sub_cluster_tag;
  // cluster type after merge independent pass
  static const std::string sub_cluster_type;
  // on chip data transfer mark between sub clusters
  static const std::string on_chip_transfer_from_node;
  // intra-op reschedule factor
  static const std::string intra_op_reschedule_factor;
  // prefetch predicate to decide whether to prefetch data in next iteration
  static const std::string prefetch_predicate;
  // If parameter have streaming access pattern
  static const std::string is_parameter_streaming_access;
  // If parameter have temporal access pattern
  static const std::string is_parameter_temporal_access;
  // If broadcast node is semi-vectorized. e.g., [128, 128] <- [128, 1] will be
  // vectorized to [128, 32] <- [128, 1] support vector length is 4. In this
  // case, node is vectorized however input node should be read in scalar.
  static const std::string is_broadcast_semi_vectorized;
  // If a node is out of vectorization scope in a vectorizable cluster.
  // This is because this node is topology before than a semi-vectirized
  // broadcast node.
  static const std::string is_node_stop_vectorized;
  // If parameter node prefetch data via LDGSTS instruction asynchronously.
  static const std::string is_parameter_async_prefetched;
  // If parameter node prefetch data via CCTL instruction.
  static const std::string is_parameter_cache_prefetched;
  // Total async pipeline stage count.
  static const std::string async_pipeline_total_stage_count;
};
}  // namespace op_annotation
}  // namespace core
}  // namespace mononn_engine
